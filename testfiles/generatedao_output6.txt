package com.example;

import com.brahma.testclass.TestEnum;
import io.dropwizard.hibernate.AbstractDAO;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.query.Query;

public class Brahma_BrahmaEntityDao extends AbstractDAO<BrahmaEntity> {
  public Brahma_BrahmaEntityDao(SessionFactory sessionFactory) {
    super(sessionFactory);
  }

  public BrahmaEntity createOrUpdate(BrahmaEntity brahmaEntity) {
    if(brahmaEntity.getOrderId() == null) {
      brahmaEntity.setOrderId(String.valueOf("12345"));
    }
    if(brahmaEntity.getTestEnum() == null) {
      brahmaEntity.setTestEnum(TestEnum.YES);
    }
    return persist(brahmaEntity);
  }

  public BrahmaEntity getById(String id) {
    return get(id);
  }

  protected List<Predicate> getPredicateList(BrahmaEntity searchQuery,
      CriteriaBuilder criteriaBuilder, Root<BrahmaEntity> from) {
    List<Predicate> searchRestrictions = new ArrayList<>();
    if (searchQuery.getId() != null) {
      searchRestrictions.add(criteriaBuilder.equal(from.get("id"), searchQuery.getId()));
    }
    if (searchQuery.getOrderId() != null) {
      searchRestrictions.add(criteriaBuilder.equal(from.get("orderId"), searchQuery.getOrderId()));
    }
    if (searchQuery.getTestEnum() != null) {
      searchRestrictions.add(criteriaBuilder.equal(from.get("testEnum"), searchQuery.getTestEnum()));
    }
    return searchRestrictions;
  }
  protected Query<BrahmaEntity> getSearchQuery(BrahmaEntity searchQuery) {
    Session session = this.currentSession();
    CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
    CriteriaQuery<BrahmaEntity> query = criteriaBuilder.createQuery(BrahmaEntity.class);
    Root<BrahmaEntity> from = query.from(BrahmaEntity.class);
    CriteriaQuery<BrahmaEntity> select = query.select(from);
    List<Predicate> searchRestrictions = getPredicateList(searchQuery,criteriaBuilder,from);
    select = select.where(searchRestrictions.toArray(new Predicate[searchRestrictions.size()]));
    return session.createQuery(select);
  }
  public List<BrahmaEntity> search(BrahmaEntity searchQuery) {
      return getSearchQuery(searchQuery).list();
  }

  public BrahmaEntity searchUniqueResult(BrahmaEntity searchQuery) {
    return getSearchQuery(searchQuery).uniqueResult();
  }
}